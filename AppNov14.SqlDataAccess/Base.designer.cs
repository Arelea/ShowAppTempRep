#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppNov14.SqlDataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VestPlastDatabase")]
	public partial class BaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWarehouse(Warehouse instance);
    partial void UpdateWarehouse(Warehouse instance);
    partial void DeleteWarehouse(Warehouse instance);
    partial void InsertManufacturingIndex(ManufacturingIndex instance);
    partial void UpdateManufacturingIndex(ManufacturingIndex instance);
    partial void DeleteManufacturingIndex(ManufacturingIndex instance);
    partial void InsertLaboratoryIndex(LaboratoryIndex instance);
    partial void UpdateLaboratoryIndex(LaboratoryIndex instance);
    partial void DeleteLaboratoryIndex(LaboratoryIndex instance);
    partial void InsertConsLabNumber(ConsLabNumber instance);
    partial void UpdateConsLabNumber(ConsLabNumber instance);
    partial void DeleteConsLabNumber(ConsLabNumber instance);
    partial void InsertBatch(Batch instance);
    partial void UpdateBatch(Batch instance);
    partial void DeleteBatch(Batch instance);
    partial void InsertReplenishmentDocument(ReplenishmentDocument instance);
    partial void UpdateReplenishmentDocument(ReplenishmentDocument instance);
    partial void DeleteReplenishmentDocument(ReplenishmentDocument instance);
    partial void InsertBatchType(BatchType instance);
    partial void UpdateBatchType(BatchType instance);
    partial void DeleteBatchType(BatchType instance);
    partial void InsertBatchLine(BatchLine instance);
    partial void UpdateBatchLine(BatchLine instance);
    partial void DeleteBatchLine(BatchLine instance);
    partial void InsertBatchStatus(BatchStatus instance);
    partial void UpdateBatchStatus(BatchStatus instance);
    partial void DeleteBatchStatus(BatchStatus instance);
    partial void InsertManufacturingRecord(ManufacturingRecord instance);
    partial void UpdateManufacturingRecord(ManufacturingRecord instance);
    partial void DeleteManufacturingRecord(ManufacturingRecord instance);
    partial void InsertLaboratoryRecord(LaboratoryRecord instance);
    partial void UpdateLaboratoryRecord(LaboratoryRecord instance);
    partial void DeleteLaboratoryRecord(LaboratoryRecord instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertBatchHistory(BatchHistory instance);
    partial void UpdateBatchHistory(BatchHistory instance);
    partial void DeleteBatchHistory(BatchHistory instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertBatchHistoryActionType(BatchHistoryActionType instance);
    partial void UpdateBatchHistoryActionType(BatchHistoryActionType instance);
    partial void DeleteBatchHistoryActionType(BatchHistoryActionType instance);
    partial void InsertBatchHistoryOperationType(BatchHistoryOperationType instance);
    partial void UpdateBatchHistoryOperationType(BatchHistoryOperationType instance);
    partial void DeleteBatchHistoryOperationType(BatchHistoryOperationType instance);
    partial void InsertChildBatch(ChildBatch instance);
    partial void UpdateChildBatch(ChildBatch instance);
    partial void DeleteChildBatch(ChildBatch instance);
    #endregion
		
		public BaseDataContext() : 
				base(global::AppNov14.SqlDataAccess.Properties.DataBaseSettings.Default.DesktopConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Warehouse> Warehouse
		{
			get
			{
				return this.GetTable<Warehouse>();
			}
		}
		
		public System.Data.Linq.Table<ManufacturingIndex> ManufacturingIndexes
		{
			get
			{
				return this.GetTable<ManufacturingIndex>();
			}
		}
		
		public System.Data.Linq.Table<LaboratoryIndex> LaboratoryIndexes
		{
			get
			{
				return this.GetTable<LaboratoryIndex>();
			}
		}
		
		public System.Data.Linq.Table<ConsLabNumber> ConsLabNumbers
		{
			get
			{
				return this.GetTable<ConsLabNumber>();
			}
		}
		
		public System.Data.Linq.Table<Batch> Batches
		{
			get
			{
				return this.GetTable<Batch>();
			}
		}
		
		public System.Data.Linq.Table<ReplenishmentDocument> ReplenishmentDocuments
		{
			get
			{
				return this.GetTable<ReplenishmentDocument>();
			}
		}
		
		public System.Data.Linq.Table<BatchType> BatchTypes
		{
			get
			{
				return this.GetTable<BatchType>();
			}
		}
		
		public System.Data.Linq.Table<BatchLine> BatchLines
		{
			get
			{
				return this.GetTable<BatchLine>();
			}
		}
		
		public System.Data.Linq.Table<BatchStatus> BatchStatuses
		{
			get
			{
				return this.GetTable<BatchStatus>();
			}
		}
		
		public System.Data.Linq.Table<ManufacturingRecord> ManufacturingRecords
		{
			get
			{
				return this.GetTable<ManufacturingRecord>();
			}
		}
		
		public System.Data.Linq.Table<LaboratoryRecord> LaboratoryRecords
		{
			get
			{
				return this.GetTable<LaboratoryRecord>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<BatchHistory> BatchHistories
		{
			get
			{
				return this.GetTable<BatchHistory>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<BatchHistoryActionType> BatchHistoryActionTypes
		{
			get
			{
				return this.GetTable<BatchHistoryActionType>();
			}
		}
		
		public System.Data.Linq.Table<BatchHistoryOperationType> BatchHistoryOperationTypes
		{
			get
			{
				return this.GetTable<BatchHistoryOperationType>();
			}
		}
		
		public System.Data.Linq.Table<ChildBatch> ChildBatches
		{
			get
			{
				return this.GetTable<ChildBatch>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Warehouse")]
	public partial class Warehouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Type;
		
		private string _SubType;
		
		private string _Provider;
		
		private string _Manufacturer;
		
		private decimal _Leftovers;
		
		private int _Mode;
		
		private EntitySet<ManufacturingIndex> _ManufacturingIndexes;
		
		private EntitySet<LaboratoryIndex> _LaboratoryIndexes;
		
		private EntitySet<ManufacturingRecord> _ManufacturingRecords;
		
		private EntitySet<LaboratoryRecord> _LaboratoryRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnSubTypeChanging(string value);
    partial void OnSubTypeChanged();
    partial void OnProviderChanging(string value);
    partial void OnProviderChanged();
    partial void OnManufacturerChanging(string value);
    partial void OnManufacturerChanged();
    partial void OnLeftoversChanging(decimal value);
    partial void OnLeftoversChanged();
    partial void OnModeChanging(int value);
    partial void OnModeChanged();
    #endregion
		
		public Warehouse()
		{
			this._ManufacturingIndexes = new EntitySet<ManufacturingIndex>(new Action<ManufacturingIndex>(this.attach_ManufacturingIndexes), new Action<ManufacturingIndex>(this.detach_ManufacturingIndexes));
			this._LaboratoryIndexes = new EntitySet<LaboratoryIndex>(new Action<LaboratoryIndex>(this.attach_LaboratoryIndexes), new Action<LaboratoryIndex>(this.detach_LaboratoryIndexes));
			this._ManufacturingRecords = new EntitySet<ManufacturingRecord>(new Action<ManufacturingRecord>(this.attach_ManufacturingRecords), new Action<ManufacturingRecord>(this.detach_ManufacturingRecords));
			this._LaboratoryRecords = new EntitySet<LaboratoryRecord>(new Action<LaboratoryRecord>(this.attach_LaboratoryRecords), new Action<LaboratoryRecord>(this.detach_LaboratoryRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(150)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubType", DbType="NVarChar(150)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string SubType
		{
			get
			{
				return this._SubType;
			}
			set
			{
				if ((this._SubType != value))
				{
					this.OnSubTypeChanging(value);
					this.SendPropertyChanging();
					this._SubType = value;
					this.SendPropertyChanged("SubType");
					this.OnSubTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="NVarChar(150)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manufacturer", DbType="NVarChar(150)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Manufacturer
		{
			get
			{
				return this._Manufacturer;
			}
			set
			{
				if ((this._Manufacturer != value))
				{
					this.OnManufacturerChanging(value);
					this.SendPropertyChanging();
					this._Manufacturer = value;
					this.SendPropertyChanged("Manufacturer");
					this.OnManufacturerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Leftovers", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.WhenChanged)]
		public decimal Leftovers
		{
			get
			{
				return this._Leftovers;
			}
			set
			{
				if ((this._Leftovers != value))
				{
					this.OnLeftoversChanging(value);
					this.SendPropertyChanging();
					this._Leftovers = value;
					this.SendPropertyChanged("Leftovers");
					this.OnLeftoversChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mode", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int Mode
		{
			get
			{
				return this._Mode;
			}
			set
			{
				if ((this._Mode != value))
				{
					this.OnModeChanging(value);
					this.SendPropertyChanging();
					this._Mode = value;
					this.SendPropertyChanged("Mode");
					this.OnModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_ManufacturingIndex", Storage="_ManufacturingIndexes", ThisKey="Id", OtherKey="WarehouseId")]
		public EntitySet<ManufacturingIndex> ManufacturingIndexes
		{
			get
			{
				return this._ManufacturingIndexes;
			}
			set
			{
				this._ManufacturingIndexes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_LaboratoryIndex", Storage="_LaboratoryIndexes", ThisKey="Id", OtherKey="WarehouseId")]
		public EntitySet<LaboratoryIndex> LaboratoryIndexes
		{
			get
			{
				return this._LaboratoryIndexes;
			}
			set
			{
				this._LaboratoryIndexes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_ManufacturingRecord", Storage="_ManufacturingRecords", ThisKey="Id", OtherKey="WarehouseId")]
		public EntitySet<ManufacturingRecord> ManufacturingRecords
		{
			get
			{
				return this._ManufacturingRecords;
			}
			set
			{
				this._ManufacturingRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_LaboratoryRecord", Storage="_LaboratoryRecords", ThisKey="Id", OtherKey="WarehouseId")]
		public EntitySet<LaboratoryRecord> LaboratoryRecords
		{
			get
			{
				return this._LaboratoryRecords;
			}
			set
			{
				this._LaboratoryRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ManufacturingIndexes(ManufacturingIndex entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_ManufacturingIndexes(ManufacturingIndex entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
		
		private void attach_LaboratoryIndexes(LaboratoryIndex entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_LaboratoryIndexes(LaboratoryIndex entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
		
		private void attach_ManufacturingRecords(ManufacturingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_ManufacturingRecords(ManufacturingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
		
		private void attach_LaboratoryRecords(LaboratoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = this;
		}
		
		private void detach_LaboratoryRecords(LaboratoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Warehouse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManufacturingIndexes")]
	public partial class ManufacturingIndex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _WarehouseId;
		
		private string _Index;
		
		private decimal _Leftovers;
		
		private System.Nullable<System.DateTime> _AutoDate;
		
		private System.Nullable<System.DateTime> _ExpirationDate;
		
		private System.Nullable<System.DateTime> _ManufacturingDate;
		
		private EntitySet<ManufacturingRecord> _ManufacturingRecords;
		
		private EntityRef<Warehouse> _Warehouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWarehouseIdChanging(int value);
    partial void OnWarehouseIdChanged();
    partial void OnIndexChanging(string value);
    partial void OnIndexChanged();
    partial void OnLeftoversChanging(decimal value);
    partial void OnLeftoversChanged();
    partial void OnAutoDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAutoDateChanged();
    partial void OnExpirationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpirationDateChanged();
    partial void OnManufacturingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnManufacturingDateChanged();
    #endregion
		
		public ManufacturingIndex()
		{
			this._ManufacturingRecords = new EntitySet<ManufacturingRecord>(new Action<ManufacturingRecord>(this.attach_ManufacturingRecords), new Action<ManufacturingRecord>(this.detach_ManufacturingRecords));
			this._Warehouse = default(EntityRef<Warehouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int WarehouseId
		{
			get
			{
				return this._WarehouseId;
			}
			set
			{
				if ((this._WarehouseId != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIdChanging(value);
					this.SendPropertyChanging();
					this._WarehouseId = value;
					this.SendPropertyChanged("WarehouseId");
					this.OnWarehouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Index", DbType="NVarChar(150)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Index
		{
			get
			{
				return this._Index;
			}
			set
			{
				if ((this._Index != value))
				{
					this.OnIndexChanging(value);
					this.SendPropertyChanging();
					this._Index = value;
					this.SendPropertyChanged("Index");
					this.OnIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Leftovers", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.WhenChanged)]
		public decimal Leftovers
		{
			get
			{
				return this._Leftovers;
			}
			set
			{
				if ((this._Leftovers != value))
				{
					this.OnLeftoversChanging(value);
					this.SendPropertyChanging();
					this._Leftovers = value;
					this.SendPropertyChanged("Leftovers");
					this.OnLeftoversChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<System.DateTime> AutoDate
		{
			get
			{
				return this._AutoDate;
			}
			set
			{
				if ((this._AutoDate != value))
				{
					this.OnAutoDateChanging(value);
					this.SendPropertyChanging();
					this._AutoDate = value;
					this.SendPropertyChanged("AutoDate");
					this.OnAutoDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<System.DateTime> ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManufacturingDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<System.DateTime> ManufacturingDate
		{
			get
			{
				return this._ManufacturingDate;
			}
			set
			{
				if ((this._ManufacturingDate != value))
				{
					this.OnManufacturingDateChanging(value);
					this.SendPropertyChanging();
					this._ManufacturingDate = value;
					this.SendPropertyChanged("ManufacturingDate");
					this.OnManufacturingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManufacturingIndex_ManufacturingRecord", Storage="_ManufacturingRecords", ThisKey="Id", OtherKey="IndexId")]
		public EntitySet<ManufacturingRecord> ManufacturingRecords
		{
			get
			{
				return this._ManufacturingRecords;
			}
			set
			{
				this._ManufacturingRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_ManufacturingIndex", Storage="_Warehouse", ThisKey="WarehouseId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.ManufacturingIndexes.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.ManufacturingIndexes.Add(this);
						this._WarehouseId = value.Id;
					}
					else
					{
						this._WarehouseId = default(int);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ManufacturingRecords(ManufacturingRecord entity)
		{
			this.SendPropertyChanging();
			entity.ManufacturingIndex = this;
		}
		
		private void detach_ManufacturingRecords(ManufacturingRecord entity)
		{
			this.SendPropertyChanging();
			entity.ManufacturingIndex = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LaboratoryIndexes")]
	public partial class LaboratoryIndex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _WarehouseId;
		
		private string _Indexation;
		
		private decimal _Leftovers;
		
		private System.Nullable<System.DateTime> _AutoDate;
		
		private EntitySet<LaboratoryRecord> _LaboratoryRecords;
		
		private EntityRef<Warehouse> _Warehouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWarehouseIdChanging(int value);
    partial void OnWarehouseIdChanged();
    partial void OnIndexationChanging(string value);
    partial void OnIndexationChanged();
    partial void OnLeftoversChanging(decimal value);
    partial void OnLeftoversChanged();
    partial void OnAutoDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAutoDateChanged();
    #endregion
		
		public LaboratoryIndex()
		{
			this._LaboratoryRecords = new EntitySet<LaboratoryRecord>(new Action<LaboratoryRecord>(this.attach_LaboratoryRecords), new Action<LaboratoryRecord>(this.detach_LaboratoryRecords));
			this._Warehouse = default(EntityRef<Warehouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int WarehouseId
		{
			get
			{
				return this._WarehouseId;
			}
			set
			{
				if ((this._WarehouseId != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIdChanging(value);
					this.SendPropertyChanging();
					this._WarehouseId = value;
					this.SendPropertyChanged("WarehouseId");
					this.OnWarehouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Indexation", DbType="NVarChar(150)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Indexation
		{
			get
			{
				return this._Indexation;
			}
			set
			{
				if ((this._Indexation != value))
				{
					this.OnIndexationChanging(value);
					this.SendPropertyChanging();
					this._Indexation = value;
					this.SendPropertyChanged("Indexation");
					this.OnIndexationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Leftovers", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.WhenChanged)]
		public decimal Leftovers
		{
			get
			{
				return this._Leftovers;
			}
			set
			{
				if ((this._Leftovers != value))
				{
					this.OnLeftoversChanging(value);
					this.SendPropertyChanging();
					this._Leftovers = value;
					this.SendPropertyChanged("Leftovers");
					this.OnLeftoversChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<System.DateTime> AutoDate
		{
			get
			{
				return this._AutoDate;
			}
			set
			{
				if ((this._AutoDate != value))
				{
					this.OnAutoDateChanging(value);
					this.SendPropertyChanging();
					this._AutoDate = value;
					this.SendPropertyChanged("AutoDate");
					this.OnAutoDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LaboratoryIndex_LaboratoryRecord", Storage="_LaboratoryRecords", ThisKey="Id", OtherKey="IndexId")]
		public EntitySet<LaboratoryRecord> LaboratoryRecords
		{
			get
			{
				return this._LaboratoryRecords;
			}
			set
			{
				this._LaboratoryRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_LaboratoryIndex", Storage="_Warehouse", ThisKey="WarehouseId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.LaboratoryIndexes.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.LaboratoryIndexes.Add(this);
						this._WarehouseId = value.Id;
					}
					else
					{
						this._WarehouseId = default(int);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LaboratoryRecords(LaboratoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.LaboratoryIndex = this;
		}
		
		private void detach_LaboratoryRecords(LaboratoryRecord entity)
		{
			this.SendPropertyChanging();
			entity.LaboratoryIndex = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConsLabNumbers")]
	public partial class ConsLabNumber : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _AutoDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAutoDateChanging(System.DateTime value);
    partial void OnAutoDateChanged();
    #endregion
		
		public ConsLabNumber()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime AutoDate
		{
			get
			{
				return this._AutoDate;
			}
			set
			{
				if ((this._AutoDate != value))
				{
					this.OnAutoDateChanging(value);
					this.SendPropertyChanging();
					this._AutoDate = value;
					this.SendPropertyChanged("AutoDate");
					this.OnAutoDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Batches")]
	public partial class Batch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _InsertDate;
		
		private System.Nullable<int> _TypeId;
		
		private int _LineId;
		
		private int _StatusId;
		
		private System.Nullable<int> _InitialPackage;
		
		private System.Nullable<decimal> _InitialQuantity;
		
		private System.Nullable<int> _CurrentPackage;
		
		private System.Nullable<decimal> _CurrentQuantity;
		
		private System.DateTime _LastUpdateDate;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _CompletionDate;
		
		private EntitySet<ManufacturingRecord> _ManufacturingRecords;
		
		private EntitySet<BatchHistory> _BatchHistories;
		
		private EntitySet<BatchHistory> _BatchHistoriesLinked;
		
		private EntitySet<ChildBatch> _ParentChildBatches;
		
		private EntitySet<ChildBatch> _ChildrenChildBatches;
		
		private EntityRef<BatchType> _BatchType;
		
		private EntityRef<BatchLine> _BatchLine;
		
		private EntityRef<BatchStatus> _BatchStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnTypeIdChanging(System.Nullable<int> value);
    partial void OnTypeIdChanged();
    partial void OnLineIdChanging(int value);
    partial void OnLineIdChanged();
    partial void OnStatusIdChanging(int value);
    partial void OnStatusIdChanged();
    partial void OnInitialPackageChanging(System.Nullable<int> value);
    partial void OnInitialPackageChanged();
    partial void OnInitialQuantityChanging(System.Nullable<decimal> value);
    partial void OnInitialQuantityChanged();
    partial void OnCurrentPackageChanging(System.Nullable<int> value);
    partial void OnCurrentPackageChanged();
    partial void OnCurrentQuantityChanging(System.Nullable<decimal> value);
    partial void OnCurrentQuantityChanged();
    partial void OnLastUpdateDateChanging(System.DateTime value);
    partial void OnLastUpdateDateChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnCompletionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletionDateChanged();
    #endregion
		
		public Batch()
		{
			this._ManufacturingRecords = new EntitySet<ManufacturingRecord>(new Action<ManufacturingRecord>(this.attach_ManufacturingRecords), new Action<ManufacturingRecord>(this.detach_ManufacturingRecords));
			this._BatchHistories = new EntitySet<BatchHistory>(new Action<BatchHistory>(this.attach_BatchHistories), new Action<BatchHistory>(this.detach_BatchHistories));
			this._BatchHistoriesLinked = new EntitySet<BatchHistory>(new Action<BatchHistory>(this.attach_BatchHistoriesLinked), new Action<BatchHistory>(this.detach_BatchHistoriesLinked));
			this._ParentChildBatches = new EntitySet<ChildBatch>(new Action<ChildBatch>(this.attach_ParentChildBatches), new Action<ChildBatch>(this.detach_ParentChildBatches));
			this._ChildrenChildBatches = new EntitySet<ChildBatch>(new Action<ChildBatch>(this.attach_ChildrenChildBatches), new Action<ChildBatch>(this.detach_ChildrenChildBatches));
			this._BatchType = default(EntityRef<BatchType>);
			this._BatchLine = default(EntityRef<BatchLine>);
			this._BatchStatus = default(EntityRef<BatchStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<int> TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._BatchType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int LineId
		{
			get
			{
				return this._LineId;
			}
			set
			{
				if ((this._LineId != value))
				{
					if (this._BatchLine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineIdChanging(value);
					this.SendPropertyChanging();
					this._LineId = value;
					this.SendPropertyChanged("LineId");
					this.OnLineIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int StatusId
		{
			get
			{
				return this._StatusId;
			}
			set
			{
				if ((this._StatusId != value))
				{
					if (this._BatchStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusIdChanging(value);
					this.SendPropertyChanging();
					this._StatusId = value;
					this.SendPropertyChanged("StatusId");
					this.OnStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialPackage", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<int> InitialPackage
		{
			get
			{
				return this._InitialPackage;
			}
			set
			{
				if ((this._InitialPackage != value))
				{
					this.OnInitialPackageChanging(value);
					this.SendPropertyChanging();
					this._InitialPackage = value;
					this.SendPropertyChanged("InitialPackage");
					this.OnInitialPackageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialQuantity", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<decimal> InitialQuantity
		{
			get
			{
				return this._InitialQuantity;
			}
			set
			{
				if ((this._InitialQuantity != value))
				{
					this.OnInitialQuantityChanging(value);
					this.SendPropertyChanging();
					this._InitialQuantity = value;
					this.SendPropertyChanged("InitialQuantity");
					this.OnInitialQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentPackage", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<int> CurrentPackage
		{
			get
			{
				return this._CurrentPackage;
			}
			set
			{
				if ((this._CurrentPackage != value))
				{
					this.OnCurrentPackageChanging(value);
					this.SendPropertyChanging();
					this._CurrentPackage = value;
					this.SendPropertyChanged("CurrentPackage");
					this.OnCurrentPackageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentQuantity", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<decimal> CurrentQuantity
		{
			get
			{
				return this._CurrentQuantity;
			}
			set
			{
				if ((this._CurrentQuantity != value))
				{
					this.OnCurrentQuantityChanging(value);
					this.SendPropertyChanging();
					this._CurrentQuantity = value;
					this.SendPropertyChanged("CurrentQuantity");
					this.OnCurrentQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<System.DateTime> CompletionDate
		{
			get
			{
				return this._CompletionDate;
			}
			set
			{
				if ((this._CompletionDate != value))
				{
					this.OnCompletionDateChanging(value);
					this.SendPropertyChanging();
					this._CompletionDate = value;
					this.SendPropertyChanged("CompletionDate");
					this.OnCompletionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_ManufacturingRecord", Storage="_ManufacturingRecords", ThisKey="Id", OtherKey="BatchId")]
		public EntitySet<ManufacturingRecord> ManufacturingRecords
		{
			get
			{
				return this._ManufacturingRecords;
			}
			set
			{
				this._ManufacturingRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_BatchHistory", Storage="_BatchHistories", ThisKey="Id", OtherKey="BatchId")]
		public EntitySet<BatchHistory> BatchHistories
		{
			get
			{
				return this._BatchHistories;
			}
			set
			{
				this._BatchHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_BatchHistory1", Storage="_BatchHistoriesLinked", ThisKey="Id", OtherKey="LinkedBatchId")]
		public EntitySet<BatchHistory> BatchHistoriesLinked
		{
			get
			{
				return this._BatchHistoriesLinked;
			}
			set
			{
				this._BatchHistoriesLinked.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_ChildBatch", Storage="_ParentChildBatches", ThisKey="Id", OtherKey="BatchId")]
		public EntitySet<ChildBatch> ParentChildBatches
		{
			get
			{
				return this._ParentChildBatches;
			}
			set
			{
				this._ParentChildBatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_ChildBatch1", Storage="_ChildrenChildBatches", ThisKey="Id", OtherKey="ChildBatchId")]
		public EntitySet<ChildBatch> ChildrenChildBatches
		{
			get
			{
				return this._ChildrenChildBatches;
			}
			set
			{
				this._ChildrenChildBatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchType_Batch", Storage="_BatchType", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
		public BatchType BatchType
		{
			get
			{
				return this._BatchType.Entity;
			}
			set
			{
				BatchType previousValue = this._BatchType.Entity;
				if (((previousValue != value) 
							|| (this._BatchType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BatchType.Entity = null;
						previousValue.Batches.Remove(this);
					}
					this._BatchType.Entity = value;
					if ((value != null))
					{
						value.Batches.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BatchType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchLine_Batch", Storage="_BatchLine", ThisKey="LineId", OtherKey="Id", IsForeignKey=true)]
		public BatchLine BatchLine
		{
			get
			{
				return this._BatchLine.Entity;
			}
			set
			{
				BatchLine previousValue = this._BatchLine.Entity;
				if (((previousValue != value) 
							|| (this._BatchLine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BatchLine.Entity = null;
						previousValue.Batches.Remove(this);
					}
					this._BatchLine.Entity = value;
					if ((value != null))
					{
						value.Batches.Add(this);
						this._LineId = value.Id;
					}
					else
					{
						this._LineId = default(int);
					}
					this.SendPropertyChanged("BatchLine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchStatus_Batch", Storage="_BatchStatus", ThisKey="StatusId", OtherKey="Id", IsForeignKey=true)]
		public BatchStatus BatchStatus
		{
			get
			{
				return this._BatchStatus.Entity;
			}
			set
			{
				BatchStatus previousValue = this._BatchStatus.Entity;
				if (((previousValue != value) 
							|| (this._BatchStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BatchStatus.Entity = null;
						previousValue.Batches.Remove(this);
					}
					this._BatchStatus.Entity = value;
					if ((value != null))
					{
						value.Batches.Add(this);
						this._StatusId = value.Id;
					}
					else
					{
						this._StatusId = default(int);
					}
					this.SendPropertyChanged("BatchStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ManufacturingRecords(ManufacturingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Batch = this;
		}
		
		private void detach_ManufacturingRecords(ManufacturingRecord entity)
		{
			this.SendPropertyChanging();
			entity.Batch = null;
		}
		
		private void attach_BatchHistories(BatchHistory entity)
		{
			this.SendPropertyChanging();
			entity.Batch = this;
		}
		
		private void detach_BatchHistories(BatchHistory entity)
		{
			this.SendPropertyChanging();
			entity.Batch = null;
		}
		
		private void attach_BatchHistoriesLinked(BatchHistory entity)
		{
			this.SendPropertyChanging();
			entity.BatchLinked = this;
		}
		
		private void detach_BatchHistoriesLinked(BatchHistory entity)
		{
			this.SendPropertyChanging();
			entity.BatchLinked = null;
		}
		
		private void attach_ParentChildBatches(ChildBatch entity)
		{
			this.SendPropertyChanging();
			entity.ParentBatch = this;
		}
		
		private void detach_ParentChildBatches(ChildBatch entity)
		{
			this.SendPropertyChanging();
			entity.ParentBatch = null;
		}
		
		private void attach_ChildrenChildBatches(ChildBatch entity)
		{
			this.SendPropertyChanging();
			entity.ChildrenBatch = this;
		}
		
		private void detach_ChildrenChildBatches(ChildBatch entity)
		{
			this.SendPropertyChanging();
			entity.ChildrenBatch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReplenishmentDocuments")]
	public partial class ReplenishmentDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _InsertDate;
		
		private EntitySet<ManufacturingRecord> _ManufacturingRecords;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    #endregion
		
		public ReplenishmentDocument()
		{
			this._ManufacturingRecords = new EntitySet<ManufacturingRecord>(new Action<ManufacturingRecord>(this.attach_ManufacturingRecords), new Action<ManufacturingRecord>(this.detach_ManufacturingRecords));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReplenishmentDocument_ManufacturingRecord", Storage="_ManufacturingRecords", ThisKey="Id", OtherKey="ReplenishmentDocumentId")]
		public EntitySet<ManufacturingRecord> ManufacturingRecords
		{
			get
			{
				return this._ManufacturingRecords;
			}
			set
			{
				this._ManufacturingRecords.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ManufacturingRecords(ManufacturingRecord entity)
		{
			this.SendPropertyChanging();
			entity.ReplenishmentDocument = this;
		}
		
		private void detach_ManufacturingRecords(ManufacturingRecord entity)
		{
			this.SendPropertyChanging();
			entity.ReplenishmentDocument = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BatchTypes")]
	public partial class BatchType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _InsertDate;
		
		private EntitySet<Batch> _Batches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    #endregion
		
		public BatchType()
		{
			this._Batches = new EntitySet<Batch>(new Action<Batch>(this.attach_Batches), new Action<Batch>(this.detach_Batches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchType_Batch", Storage="_Batches", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<Batch> Batches
		{
			get
			{
				return this._Batches;
			}
			set
			{
				this._Batches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Batches(Batch entity)
		{
			this.SendPropertyChanging();
			entity.BatchType = this;
		}
		
		private void detach_Batches(Batch entity)
		{
			this.SendPropertyChanging();
			entity.BatchType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BatchLines")]
	public partial class BatchLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _DisplayName;
		
		private EntitySet<Batch> _Batches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public BatchLine()
		{
			this._Batches = new EntitySet<Batch>(new Action<Batch>(this.attach_Batches), new Action<Batch>(this.detach_Batches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchLine_Batch", Storage="_Batches", ThisKey="Id", OtherKey="LineId")]
		public EntitySet<Batch> Batches
		{
			get
			{
				return this._Batches;
			}
			set
			{
				this._Batches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Batches(Batch entity)
		{
			this.SendPropertyChanging();
			entity.BatchLine = this;
		}
		
		private void detach_Batches(Batch entity)
		{
			this.SendPropertyChanging();
			entity.BatchLine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BatchStatuses")]
	public partial class BatchStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _CssClass;
		
		private EntitySet<Batch> _Batches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCssClassChanging(string value);
    partial void OnCssClassChanged();
    #endregion
		
		public BatchStatus()
		{
			this._Batches = new EntitySet<Batch>(new Action<Batch>(this.attach_Batches), new Action<Batch>(this.detach_Batches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CssClass", DbType="NVarChar(100)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string CssClass
		{
			get
			{
				return this._CssClass;
			}
			set
			{
				if ((this._CssClass != value))
				{
					this.OnCssClassChanging(value);
					this.SendPropertyChanging();
					this._CssClass = value;
					this.SendPropertyChanged("CssClass");
					this.OnCssClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchStatus_Batch", Storage="_Batches", ThisKey="Id", OtherKey="StatusId")]
		public EntitySet<Batch> Batches
		{
			get
			{
				return this._Batches;
			}
			set
			{
				this._Batches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Batches(Batch entity)
		{
			this.SendPropertyChanging();
			entity.BatchStatus = this;
		}
		
		private void detach_Batches(Batch entity)
		{
			this.SendPropertyChanging();
			entity.BatchStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManufacturingRecords")]
	public partial class ManufacturingRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Quantity;
		
		private decimal _Leftovers;
		
		private System.DateTime _DocDate;
		
		private string _Employee;
		
		private string _IpAddress;
		
		private System.DateTime _InsertDate;
		
		private string _Remarks;
		
		private int _ActionType;
		
		private int _WarehouseId;
		
		private System.Nullable<int> _IndexId;
		
		private System.Nullable<int> _ReplenishmentDocumentId;
		
		private System.Nullable<int> _BatchId;
		
		private EntityRef<Warehouse> _Warehouse;
		
		private EntityRef<ManufacturingIndex> _ManufacturingIndex;
		
		private EntityRef<Batch> _Batch;
		
		private EntityRef<ReplenishmentDocument> _ReplenishmentDocument;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnLeftoversChanging(decimal value);
    partial void OnLeftoversChanged();
    partial void OnDocDateChanging(System.DateTime value);
    partial void OnDocDateChanged();
    partial void OnEmployeeChanging(string value);
    partial void OnEmployeeChanged();
    partial void OnIpAddressChanging(string value);
    partial void OnIpAddressChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnActionTypeChanging(int value);
    partial void OnActionTypeChanged();
    partial void OnWarehouseIdChanging(int value);
    partial void OnWarehouseIdChanged();
    partial void OnIndexIdChanging(System.Nullable<int> value);
    partial void OnIndexIdChanged();
    partial void OnReplenishmentDocumentIdChanging(System.Nullable<int> value);
    partial void OnReplenishmentDocumentIdChanged();
    partial void OnBatchIdChanging(System.Nullable<int> value);
    partial void OnBatchIdChanged();
    #endregion
		
		public ManufacturingRecord()
		{
			this._Warehouse = default(EntityRef<Warehouse>);
			this._ManufacturingIndex = default(EntityRef<ManufacturingIndex>);
			this._Batch = default(EntityRef<Batch>);
			this._ReplenishmentDocument = default(EntityRef<ReplenishmentDocument>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.WhenChanged)]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Leftovers", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.WhenChanged)]
		public decimal Leftovers
		{
			get
			{
				return this._Leftovers;
			}
			set
			{
				if ((this._Leftovers != value))
				{
					this.OnLeftoversChanging(value);
					this.SendPropertyChanging();
					this._Leftovers = value;
					this.SendPropertyChanged("Leftovers");
					this.OnLeftoversChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocDate", DbType="Date", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee", DbType="NVarChar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				if ((this._Employee != value))
				{
					this.OnEmployeeChanging(value);
					this.SendPropertyChanging();
					this._Employee = value;
					this.SendPropertyChanged("Employee");
					this.OnEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpAddress", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.WhenChanged)]
		public string IpAddress
		{
			get
			{
				return this._IpAddress;
			}
			set
			{
				if ((this._IpAddress != value))
				{
					this.OnIpAddressChanging(value);
					this.SendPropertyChanging();
					this._IpAddress = value;
					this.SendPropertyChanged("IpAddress");
					this.OnIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionType", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int ActionType
		{
			get
			{
				return this._ActionType;
			}
			set
			{
				if ((this._ActionType != value))
				{
					this.OnActionTypeChanging(value);
					this.SendPropertyChanging();
					this._ActionType = value;
					this.SendPropertyChanged("ActionType");
					this.OnActionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int WarehouseId
		{
			get
			{
				return this._WarehouseId;
			}
			set
			{
				if ((this._WarehouseId != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIdChanging(value);
					this.SendPropertyChanging();
					this._WarehouseId = value;
					this.SendPropertyChanged("WarehouseId");
					this.OnWarehouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndexId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<int> IndexId
		{
			get
			{
				return this._IndexId;
			}
			set
			{
				if ((this._IndexId != value))
				{
					if (this._ManufacturingIndex.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndexIdChanging(value);
					this.SendPropertyChanging();
					this._IndexId = value;
					this.SendPropertyChanged("IndexId");
					this.OnIndexIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplenishmentDocumentId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<int> ReplenishmentDocumentId
		{
			get
			{
				return this._ReplenishmentDocumentId;
			}
			set
			{
				if ((this._ReplenishmentDocumentId != value))
				{
					if (this._ReplenishmentDocument.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReplenishmentDocumentIdChanging(value);
					this.SendPropertyChanging();
					this._ReplenishmentDocumentId = value;
					this.SendPropertyChanged("ReplenishmentDocumentId");
					this.OnReplenishmentDocumentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<int> BatchId
		{
			get
			{
				return this._BatchId;
			}
			set
			{
				if ((this._BatchId != value))
				{
					if (this._Batch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatchIdChanging(value);
					this.SendPropertyChanging();
					this._BatchId = value;
					this.SendPropertyChanged("BatchId");
					this.OnBatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_ManufacturingRecord", Storage="_Warehouse", ThisKey="WarehouseId", OtherKey="Id", IsForeignKey=true)]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.ManufacturingRecords.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.ManufacturingRecords.Add(this);
						this._WarehouseId = value.Id;
					}
					else
					{
						this._WarehouseId = default(int);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ManufacturingIndex_ManufacturingRecord", Storage="_ManufacturingIndex", ThisKey="IndexId", OtherKey="Id", IsForeignKey=true)]
		public ManufacturingIndex ManufacturingIndex
		{
			get
			{
				return this._ManufacturingIndex.Entity;
			}
			set
			{
				ManufacturingIndex previousValue = this._ManufacturingIndex.Entity;
				if (((previousValue != value) 
							|| (this._ManufacturingIndex.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ManufacturingIndex.Entity = null;
						previousValue.ManufacturingRecords.Remove(this);
					}
					this._ManufacturingIndex.Entity = value;
					if ((value != null))
					{
						value.ManufacturingRecords.Add(this);
						this._IndexId = value.Id;
					}
					else
					{
						this._IndexId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ManufacturingIndex");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_ManufacturingRecord", Storage="_Batch", ThisKey="BatchId", OtherKey="Id", IsForeignKey=true)]
		public Batch Batch
		{
			get
			{
				return this._Batch.Entity;
			}
			set
			{
				Batch previousValue = this._Batch.Entity;
				if (((previousValue != value) 
							|| (this._Batch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Batch.Entity = null;
						previousValue.ManufacturingRecords.Remove(this);
					}
					this._Batch.Entity = value;
					if ((value != null))
					{
						value.ManufacturingRecords.Add(this);
						this._BatchId = value.Id;
					}
					else
					{
						this._BatchId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Batch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReplenishmentDocument_ManufacturingRecord", Storage="_ReplenishmentDocument", ThisKey="ReplenishmentDocumentId", OtherKey="Id", IsForeignKey=true)]
		public ReplenishmentDocument ReplenishmentDocument
		{
			get
			{
				return this._ReplenishmentDocument.Entity;
			}
			set
			{
				ReplenishmentDocument previousValue = this._ReplenishmentDocument.Entity;
				if (((previousValue != value) 
							|| (this._ReplenishmentDocument.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReplenishmentDocument.Entity = null;
						previousValue.ManufacturingRecords.Remove(this);
					}
					this._ReplenishmentDocument.Entity = value;
					if ((value != null))
					{
						value.ManufacturingRecords.Add(this);
						this._ReplenishmentDocumentId = value.Id;
					}
					else
					{
						this._ReplenishmentDocumentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReplenishmentDocument");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LaboratoryRecords")]
	public partial class LaboratoryRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Quantity;
		
		private decimal _Leftovers;
		
		private string _Document;
		
		private string _DocumentNumber;
		
		private System.DateTime _DocDate;
		
		private string _Employee;
		
		private string _IpAddress;
		
		private System.DateTime _AutoDate;
		
		private string _Remarks;
		
		private int _Action;
		
		private int _WarehouseId;
		
		private System.Nullable<int> _IndexId;
		
		private EntityRef<Warehouse> _Warehouse;
		
		private EntityRef<LaboratoryIndex> _LaboratoryIndex;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuantityChanging(decimal value);
    partial void OnQuantityChanged();
    partial void OnLeftoversChanging(decimal value);
    partial void OnLeftoversChanged();
    partial void OnDocumentChanging(string value);
    partial void OnDocumentChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnDocDateChanging(System.DateTime value);
    partial void OnDocDateChanged();
    partial void OnEmployeeChanging(string value);
    partial void OnEmployeeChanged();
    partial void OnIpAddressChanging(string value);
    partial void OnIpAddressChanged();
    partial void OnAutoDateChanging(System.DateTime value);
    partial void OnAutoDateChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnActionChanging(int value);
    partial void OnActionChanged();
    partial void OnWarehouseIdChanging(int value);
    partial void OnWarehouseIdChanged();
    partial void OnIndexIdChanging(System.Nullable<int> value);
    partial void OnIndexIdChanged();
    #endregion
		
		public LaboratoryRecord()
		{
			this._Warehouse = default(EntityRef<Warehouse>);
			this._LaboratoryIndex = default(EntityRef<LaboratoryIndex>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.WhenChanged)]
		public decimal Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Leftovers", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.WhenChanged)]
		public decimal Leftovers
		{
			get
			{
				return this._Leftovers;
			}
			set
			{
				if ((this._Leftovers != value))
				{
					this.OnLeftoversChanging(value);
					this.SendPropertyChanging();
					this._Leftovers = value;
					this.SendPropertyChanged("Leftovers");
					this.OnLeftoversChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Document", DbType="NVarChar(150)", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Document
		{
			get
			{
				return this._Document;
			}
			set
			{
				if ((this._Document != value))
				{
					this.OnDocumentChanging(value);
					this.SendPropertyChanging();
					this._Document = value;
					this.SendPropertyChanged("Document");
					this.OnDocumentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="NVarChar(150)", UpdateCheck=UpdateCheck.WhenChanged)]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this.OnDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumentNumber = value;
					this.SendPropertyChanged("DocumentNumber");
					this.OnDocumentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocDate", DbType="Date", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime DocDate
		{
			get
			{
				return this._DocDate;
			}
			set
			{
				if ((this._DocDate != value))
				{
					this.OnDocDateChanging(value);
					this.SendPropertyChanging();
					this._DocDate = value;
					this.SendPropertyChanged("DocDate");
					this.OnDocDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee", DbType="NVarChar(50)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				if ((this._Employee != value))
				{
					this.OnEmployeeChanging(value);
					this.SendPropertyChanging();
					this._Employee = value;
					this.SendPropertyChanged("Employee");
					this.OnEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpAddress", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.WhenChanged)]
		public string IpAddress
		{
			get
			{
				return this._IpAddress;
			}
			set
			{
				if ((this._IpAddress != value))
				{
					this.OnIpAddressChanging(value);
					this.SendPropertyChanging();
					this._IpAddress = value;
					this.SendPropertyChanged("IpAddress");
					this.OnIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AutoDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime AutoDate
		{
			get
			{
				return this._AutoDate;
			}
			set
			{
				if ((this._AutoDate != value))
				{
					this.OnAutoDateChanging(value);
					this.SendPropertyChanging();
					this._AutoDate = value;
					this.SendPropertyChanged("AutoDate");
					this.OnAutoDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WarehouseId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int WarehouseId
		{
			get
			{
				return this._WarehouseId;
			}
			set
			{
				if ((this._WarehouseId != value))
				{
					if (this._Warehouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWarehouseIdChanging(value);
					this.SendPropertyChanging();
					this._WarehouseId = value;
					this.SendPropertyChanged("WarehouseId");
					this.OnWarehouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndexId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<int> IndexId
		{
			get
			{
				return this._IndexId;
			}
			set
			{
				if ((this._IndexId != value))
				{
					if (this._LaboratoryIndex.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndexIdChanging(value);
					this.SendPropertyChanging();
					this._IndexId = value;
					this.SendPropertyChanged("IndexId");
					this.OnIndexIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Warehouse_LaboratoryRecord", Storage="_Warehouse", ThisKey="WarehouseId", OtherKey="Id", IsForeignKey=true)]
		public Warehouse Warehouse
		{
			get
			{
				return this._Warehouse.Entity;
			}
			set
			{
				Warehouse previousValue = this._Warehouse.Entity;
				if (((previousValue != value) 
							|| (this._Warehouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Warehouse.Entity = null;
						previousValue.LaboratoryRecords.Remove(this);
					}
					this._Warehouse.Entity = value;
					if ((value != null))
					{
						value.LaboratoryRecords.Add(this);
						this._WarehouseId = value.Id;
					}
					else
					{
						this._WarehouseId = default(int);
					}
					this.SendPropertyChanged("Warehouse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LaboratoryIndex_LaboratoryRecord", Storage="_LaboratoryIndex", ThisKey="IndexId", OtherKey="Id", IsForeignKey=true)]
		public LaboratoryIndex LaboratoryIndex
		{
			get
			{
				return this._LaboratoryIndex.Entity;
			}
			set
			{
				LaboratoryIndex previousValue = this._LaboratoryIndex.Entity;
				if (((previousValue != value) 
							|| (this._LaboratoryIndex.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LaboratoryIndex.Entity = null;
						previousValue.LaboratoryRecords.Remove(this);
					}
					this._LaboratoryIndex.Entity = value;
					if ((value != null))
					{
						value.LaboratoryRecords.Add(this);
						this._IndexId = value.Id;
					}
					else
					{
						this._IndexId = default(Nullable<int>);
					}
					this.SendPropertyChanged("LaboratoryIndex");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Text;
		
		private System.DateTime _InsertDate;
		
		private int _Type;
		
		private int _Status;
		
		private string _Employee;
		
		private string _Answer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnEmployeeChanging(string value);
    partial void OnEmployeeChanged();
    partial void OnAnswerChanging(string value);
    partial void OnAnswerChanged();
    #endregion
		
		public Comment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(5000)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee", DbType="NVarChar(150)", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				if ((this._Employee != value))
				{
					this.OnEmployeeChanging(value);
					this.SendPropertyChanging();
					this._Employee = value;
					this.SendPropertyChanged("Employee");
					this.OnEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Answer", DbType="NVarChar(5000)", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BatchHistories")]
	public partial class BatchHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BatchId;
		
		private string _Text;
		
		private int _ActionTypeId;
		
		private int _OperationTypeId;
		
		private System.DateTime _InsertDate;
		
		private System.Nullable<int> _CustomerId;
		
		private System.Nullable<int> _Package;
		
		private System.Nullable<decimal> _Quantity;
		
		private System.Nullable<int> _LeftPackage;
		
		private System.Nullable<decimal> _LeftQuantity;
		
		private string _Remark;
		
		private System.Nullable<System.DateTime> _SoldDate;
		
		private System.Nullable<int> _LinkedBatchId;
		
		private System.Nullable<System.DateTime> _ReturnDate;
		
		private EntityRef<Batch> _Batch;
		
		private EntityRef<Batch> _BatchLinked;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<BatchHistoryActionType> _BatchHistoryActionType;
		
		private EntityRef<BatchHistoryOperationType> _BatchHistoryOperationType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBatchIdChanging(int value);
    partial void OnBatchIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnActionTypeIdChanging(int value);
    partial void OnActionTypeIdChanged();
    partial void OnOperationTypeIdChanging(int value);
    partial void OnOperationTypeIdChanged();
    partial void OnInsertDateChanging(System.DateTime value);
    partial void OnInsertDateChanged();
    partial void OnCustomerIdChanging(System.Nullable<int> value);
    partial void OnCustomerIdChanged();
    partial void OnPackageChanging(System.Nullable<int> value);
    partial void OnPackageChanged();
    partial void OnQuantityChanging(System.Nullable<decimal> value);
    partial void OnQuantityChanged();
    partial void OnLeftPackageChanging(System.Nullable<int> value);
    partial void OnLeftPackageChanged();
    partial void OnLeftQuantityChanging(System.Nullable<decimal> value);
    partial void OnLeftQuantityChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnSoldDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSoldDateChanged();
    partial void OnLinkedBatchIdChanging(System.Nullable<int> value);
    partial void OnLinkedBatchIdChanged();
    partial void OnReturnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnDateChanged();
    #endregion
		
		public BatchHistory()
		{
			this._Batch = default(EntityRef<Batch>);
			this._BatchLinked = default(EntityRef<Batch>);
			this._Customer = default(EntityRef<Customer>);
			this._BatchHistoryActionType = default(EntityRef<BatchHistoryActionType>);
			this._BatchHistoryOperationType = default(EntityRef<BatchHistoryOperationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int BatchId
		{
			get
			{
				return this._BatchId;
			}
			set
			{
				if ((this._BatchId != value))
				{
					if (this._Batch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatchIdChanging(value);
					this.SendPropertyChanging();
					this._BatchId = value;
					this.SendPropertyChanged("BatchId");
					this.OnBatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(3000)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionTypeId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int ActionTypeId
		{
			get
			{
				return this._ActionTypeId;
			}
			set
			{
				if ((this._ActionTypeId != value))
				{
					if (this._BatchHistoryActionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ActionTypeId = value;
					this.SendPropertyChanged("ActionTypeId");
					this.OnActionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationTypeId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int OperationTypeId
		{
			get
			{
				return this._OperationTypeId;
			}
			set
			{
				if ((this._OperationTypeId != value))
				{
					if (this._BatchHistoryOperationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOperationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._OperationTypeId = value;
					this.SendPropertyChanged("OperationTypeId");
					this.OnOperationTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<int> CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Package", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<int> Package
		{
			get
			{
				return this._Package;
			}
			set
			{
				if ((this._Package != value))
				{
					this.OnPackageChanging(value);
					this.SendPropertyChanging();
					this._Package = value;
					this.SendPropertyChanged("Package");
					this.OnPackageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<decimal> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeftPackage", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<int> LeftPackage
		{
			get
			{
				return this._LeftPackage;
			}
			set
			{
				if ((this._LeftPackage != value))
				{
					this.OnLeftPackageChanging(value);
					this.SendPropertyChanging();
					this._LeftPackage = value;
					this.SendPropertyChanged("LeftPackage");
					this.OnLeftPackageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeftQuantity", DbType="Decimal(15,3)", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<decimal> LeftQuantity
		{
			get
			{
				return this._LeftQuantity;
			}
			set
			{
				if ((this._LeftQuantity != value))
				{
					this.OnLeftQuantityChanging(value);
					this.SendPropertyChanging();
					this._LeftQuantity = value;
					this.SendPropertyChanged("LeftQuantity");
					this.OnLeftQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="NVarChar(500)", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoldDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<System.DateTime> SoldDate
		{
			get
			{
				return this._SoldDate;
			}
			set
			{
				if ((this._SoldDate != value))
				{
					this.OnSoldDateChanging(value);
					this.SendPropertyChanging();
					this._SoldDate = value;
					this.SendPropertyChanged("SoldDate");
					this.OnSoldDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkedBatchId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<int> LinkedBatchId
		{
			get
			{
				return this._LinkedBatchId;
			}
			set
			{
				if ((this._LinkedBatchId != value))
				{
					if (this._BatchLinked.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkedBatchIdChanging(value);
					this.SendPropertyChanging();
					this._LinkedBatchId = value;
					this.SendPropertyChanged("LinkedBatchId");
					this.OnLinkedBatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnDate", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<System.DateTime> ReturnDate
		{
			get
			{
				return this._ReturnDate;
			}
			set
			{
				if ((this._ReturnDate != value))
				{
					this.OnReturnDateChanging(value);
					this.SendPropertyChanging();
					this._ReturnDate = value;
					this.SendPropertyChanged("ReturnDate");
					this.OnReturnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_BatchHistory", Storage="_Batch", ThisKey="BatchId", OtherKey="Id", IsForeignKey=true)]
		public Batch Batch
		{
			get
			{
				return this._Batch.Entity;
			}
			set
			{
				Batch previousValue = this._Batch.Entity;
				if (((previousValue != value) 
							|| (this._Batch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Batch.Entity = null;
						previousValue.BatchHistories.Remove(this);
					}
					this._Batch.Entity = value;
					if ((value != null))
					{
						value.BatchHistories.Add(this);
						this._BatchId = value.Id;
					}
					else
					{
						this._BatchId = default(int);
					}
					this.SendPropertyChanged("Batch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_BatchHistory1", Storage="_BatchLinked", ThisKey="LinkedBatchId", OtherKey="Id", IsForeignKey=true)]
		public Batch BatchLinked
		{
			get
			{
				return this._BatchLinked.Entity;
			}
			set
			{
				Batch previousValue = this._BatchLinked.Entity;
				if (((previousValue != value) 
							|| (this._BatchLinked.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BatchLinked.Entity = null;
						previousValue.BatchHistoriesLinked.Remove(this);
					}
					this._BatchLinked.Entity = value;
					if ((value != null))
					{
						value.BatchHistoriesLinked.Add(this);
						this._LinkedBatchId = value.Id;
					}
					else
					{
						this._LinkedBatchId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BatchLinked");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_BatchHistory", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.BatchHistories.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.BatchHistories.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchHistoryActionType_BatchHistory", Storage="_BatchHistoryActionType", ThisKey="ActionTypeId", OtherKey="Id", IsForeignKey=true)]
		public BatchHistoryActionType BatchHistoryActionType
		{
			get
			{
				return this._BatchHistoryActionType.Entity;
			}
			set
			{
				BatchHistoryActionType previousValue = this._BatchHistoryActionType.Entity;
				if (((previousValue != value) 
							|| (this._BatchHistoryActionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BatchHistoryActionType.Entity = null;
						previousValue.BatchHistories.Remove(this);
					}
					this._BatchHistoryActionType.Entity = value;
					if ((value != null))
					{
						value.BatchHistories.Add(this);
						this._ActionTypeId = value.Id;
					}
					else
					{
						this._ActionTypeId = default(int);
					}
					this.SendPropertyChanged("BatchHistoryActionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchHistoryOperationType_BatchHistory", Storage="_BatchHistoryOperationType", ThisKey="OperationTypeId", OtherKey="Id", IsForeignKey=true)]
		public BatchHistoryOperationType BatchHistoryOperationType
		{
			get
			{
				return this._BatchHistoryOperationType.Entity;
			}
			set
			{
				BatchHistoryOperationType previousValue = this._BatchHistoryOperationType.Entity;
				if (((previousValue != value) 
							|| (this._BatchHistoryOperationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BatchHistoryOperationType.Entity = null;
						previousValue.BatchHistories.Remove(this);
					}
					this._BatchHistoryOperationType.Entity = value;
					if ((value != null))
					{
						value.BatchHistories.Add(this);
						this._OperationTypeId = value.Id;
					}
					else
					{
						this._OperationTypeId = default(int);
					}
					this.SendPropertyChanged("BatchHistoryOperationType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<BatchHistory> _BatchHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Customer()
		{
			this._BatchHistories = new EntitySet<BatchHistory>(new Action<BatchHistory>(this.attach_BatchHistories), new Action<BatchHistory>(this.detach_BatchHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_BatchHistory", Storage="_BatchHistories", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<BatchHistory> BatchHistories
		{
			get
			{
				return this._BatchHistories;
			}
			set
			{
				this._BatchHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BatchHistories(BatchHistory entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_BatchHistories(BatchHistory entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BatchHistoryActionTypes")]
	public partial class BatchHistoryActionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _CssClass;
		
		private EntitySet<BatchHistory> _BatchHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCssClassChanging(string value);
    partial void OnCssClassChanged();
    #endregion
		
		public BatchHistoryActionType()
		{
			this._BatchHistories = new EntitySet<BatchHistory>(new Action<BatchHistory>(this.attach_BatchHistories), new Action<BatchHistory>(this.detach_BatchHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CssClass", DbType="NVarChar(100)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string CssClass
		{
			get
			{
				return this._CssClass;
			}
			set
			{
				if ((this._CssClass != value))
				{
					this.OnCssClassChanging(value);
					this.SendPropertyChanging();
					this._CssClass = value;
					this.SendPropertyChanged("CssClass");
					this.OnCssClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchHistoryActionType_BatchHistory", Storage="_BatchHistories", ThisKey="Id", OtherKey="ActionTypeId")]
		public EntitySet<BatchHistory> BatchHistories
		{
			get
			{
				return this._BatchHistories;
			}
			set
			{
				this._BatchHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BatchHistories(BatchHistory entity)
		{
			this.SendPropertyChanging();
			entity.BatchHistoryActionType = this;
		}
		
		private void detach_BatchHistories(BatchHistory entity)
		{
			this.SendPropertyChanging();
			entity.BatchHistoryActionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BatchHistoryOperationTypes")]
	public partial class BatchHistoryOperationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _CssClass;
		
		private EntitySet<BatchHistory> _BatchHistories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCssClassChanging(string value);
    partial void OnCssClassChanged();
    #endregion
		
		public BatchHistoryOperationType()
		{
			this._BatchHistories = new EntitySet<BatchHistory>(new Action<BatchHistory>(this.attach_BatchHistories), new Action<BatchHistory>(this.detach_BatchHistories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CssClass", DbType="NVarChar(100)", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string CssClass
		{
			get
			{
				return this._CssClass;
			}
			set
			{
				if ((this._CssClass != value))
				{
					this.OnCssClassChanging(value);
					this.SendPropertyChanging();
					this._CssClass = value;
					this.SendPropertyChanged("CssClass");
					this.OnCssClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BatchHistoryOperationType_BatchHistory", Storage="_BatchHistories", ThisKey="Id", OtherKey="OperationTypeId")]
		public EntitySet<BatchHistory> BatchHistories
		{
			get
			{
				return this._BatchHistories;
			}
			set
			{
				this._BatchHistories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BatchHistories(BatchHistory entity)
		{
			this.SendPropertyChanging();
			entity.BatchHistoryOperationType = this;
		}
		
		private void detach_BatchHistories(BatchHistory entity)
		{
			this.SendPropertyChanging();
			entity.BatchHistoryOperationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChildBatches")]
	public partial class ChildBatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _BatchId;
		
		private int _ChildBatchId;
		
		private System.DateTime _Date;
		
		private EntityRef<Batch> _ParentBatch;
		
		private EntityRef<Batch> _ChildrenBatch;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBatchIdChanging(int value);
    partial void OnBatchIdChanged();
    partial void OnChildBatchIdChanging(int value);
    partial void OnChildBatchIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public ChildBatch()
		{
			this._ParentBatch = default(EntityRef<Batch>);
			this._ChildrenBatch = default(EntityRef<Batch>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int BatchId
		{
			get
			{
				return this._BatchId;
			}
			set
			{
				if ((this._BatchId != value))
				{
					if (this._ParentBatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBatchIdChanging(value);
					this.SendPropertyChanging();
					this._BatchId = value;
					this.SendPropertyChanged("BatchId");
					this.OnBatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildBatchId", DbType="Int", UpdateCheck=UpdateCheck.WhenChanged)]
		public int ChildBatchId
		{
			get
			{
				return this._ChildBatchId;
			}
			set
			{
				if ((this._ChildBatchId != value))
				{
					if (this._ChildrenBatch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildBatchIdChanging(value);
					this.SendPropertyChanging();
					this._ChildBatchId = value;
					this.SendPropertyChanged("ChildBatchId");
					this.OnChildBatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Smalldatetime", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_ChildBatch", Storage="_ParentBatch", ThisKey="BatchId", OtherKey="Id", IsForeignKey=true)]
		public Batch ParentBatch
		{
			get
			{
				return this._ParentBatch.Entity;
			}
			set
			{
				Batch previousValue = this._ParentBatch.Entity;
				if (((previousValue != value) 
							|| (this._ParentBatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentBatch.Entity = null;
						previousValue.ParentChildBatches.Remove(this);
					}
					this._ParentBatch.Entity = value;
					if ((value != null))
					{
						value.ParentChildBatches.Add(this);
						this._BatchId = value.Id;
					}
					else
					{
						this._BatchId = default(int);
					}
					this.SendPropertyChanged("ParentBatch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Batch_ChildBatch1", Storage="_ChildrenBatch", ThisKey="ChildBatchId", OtherKey="Id", IsForeignKey=true)]
		public Batch ChildrenBatch
		{
			get
			{
				return this._ChildrenBatch.Entity;
			}
			set
			{
				Batch previousValue = this._ChildrenBatch.Entity;
				if (((previousValue != value) 
							|| (this._ChildrenBatch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildrenBatch.Entity = null;
						previousValue.ChildrenChildBatches.Remove(this);
					}
					this._ChildrenBatch.Entity = value;
					if ((value != null))
					{
						value.ChildrenChildBatches.Add(this);
						this._ChildBatchId = value.Id;
					}
					else
					{
						this._ChildBatchId = default(int);
					}
					this.SendPropertyChanged("ChildrenBatch");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
